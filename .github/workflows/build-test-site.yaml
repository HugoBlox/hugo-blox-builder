name: CI - Build Test Site

on:
  push:
    branches: [main]
    paths:
      - "modules/**"
      - "test/**"
      - "scripts/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "biome.json"
      - ".stylelintrc.yaml"
      - "vite.config.js"
  pull_request:
    branches: [main]
    paths:
      - "modules/**"
      - "test/**"
      - "scripts/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "biome.json"
      - ".stylelintrc.yaml"
      - "vite.config.js"

permissions:
  contents: read

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22"
  HUGO_VERSION: "0.150.0"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
    #        node-version: [22.x]

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true # Fetch any Git submodules (true OR recursive)
          fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod

      - name: Validate Hugo version consistency
        run: |
          set -euo pipefail
          EXPECTED=$(grep -E "^\s*hugo_version:\s*['\"]?" starters/academic-cv/hugoblox.yaml | sed -E "s/.*hugo_version:\s*['\"]?([^'\"]+)['\"]?.*/\1/")
          echo "Expected Hugo from starter: $EXPECTED"
          echo "Hugo in CI: $HUGO_VERSION"
          if [ "$EXPECTED" != "$HUGO_VERSION" ]; then
            echo "::error::HUGO_VERSION ($HUGO_VERSION) does not match starters/academic-cv/hugoblox.yaml ($EXPECTED). Update .github/workflows env or starter version."
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: "pnpm"

      - name: Enable Corepack (use pnpm from package.json)
        run: corepack enable

      - name: Install root dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Tailwind v4 dependencies for test site
        run: |
          cd test
          pnpm install --frozen-lockfile
          cd ..

      - name: Cache Hugo resources (test)
        uses: actions/cache@v4
        with:
          path: test/resources/
          key: ${{ runner.os }}-hugo-resources-test-${{ hashFiles('test/assets/**/*', 'test/config/**/*', 'test/hugo.yaml', 'test/package.json') }}
          restore-keys: |
            ${{ runner.os }}-hugo-resources-test-

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: "${{ env.HUGO_VERSION }}"
          extended: true

      - name: Build
        run: hugo --minify --panicOnWarning --templateMetrics --templateMetricsHints
        working-directory: test
